#!/bin/bash

# Copyright (c) 2019 FEROX YT EIRL, www.ferox.yt <devops@ferox.yt>
# Copyright (c) 2019 Jérémy WALTHER <jeremy.walther@golflima.net>
# See <https://github.com/frxyt/docker-labrackup> for details.

# Stop on first error
set -eE

# Handle errors
function trap_err() {
    die "Fatal Error: /frx/start:$1"
}
trap 'trap_err $LINENO' ERR

# Colors
NC=$'\033[0m'
DARK_GRAY=$'\033[1;30m'
LIGHT_RED=$'\033[1;31m'
LIGHT_GREEN=$'\033[1;32m'
LIGHT_BLUE=$'\033[1;34m'

# Disable colors if they are not supported
if [[ "$(tput colors 2> /dev/null)" == -1 || "$?" != 0 ]]; then
    NC=''; DARK_GRAY=''; LIGHT_RED=''; LIGHT_GREEN=''; LIGHT_BLUE=''; 
fi

# Declare needed functions
function echo_dated() {
    echo -e $2 "${DARK_GRAY}[$(date +'%F %T')]${NC} $1${NC}"
}

function die() {
    echo_dated "${LIGHT_RED}[!] $1" >&2
    exit 1;
}

function info() {
    echo_dated "${LIGHT_BLUE}$1"
}

function trace() {
    echo_dated "${DARK_GRAY}$1"
}

function trace_cmd() {
    while read data; do
        trace "${data}"
    done
}

function success() {
    echo_dated "${LIGHT_GREEN}$1"
}

function get_backup_conf() {
    local backup="$1"
    local config="$2"
    echo "$(yq -Mr ".backups.${backup}.${config}" ${conf_file})"
}

function get_backup_conf_type() {
    local backup="$1"
    local config="$2"
    echo "$(yq -Mr ".backups.${backup}.${config} | type" ${conf_file})"
}

function check_backup_conf_type() {
    local backup="$1"
    local config="$2"
    local expected_type="$3"
    local actual_type="$(get_backup_conf_type ${backup} ${config})"
    if [[ ! "${actual_type}" =~ ${expected_type} ]]; then
        die "Expected type '${expected_type}' for '${backup}/${config}' in '${conf_file}', but found type: '${actual_type}'."
    fi
}

function check_backup_conf() {
    local backup="$1"
    check_backup_conf_type ${backup} remote_host string
    check_backup_conf_type ${backup} remote_port number
    check_backup_conf_type ${backup} remote_user string
    check_backup_conf_type ${backup} remote_keyfile string
    check_backup_conf_type ${backup} remote_path string
    check_backup_conf_type ${backup} local_path string
    check_backup_conf_type ${backup} local_rotate 'string|array'
}

function perform_backup() {
    local backup="$1"
    local remote_host="$(get_backup_conf ${backup} remote_host)"
    local remote_port="$(get_backup_conf ${backup} remote_port)"
    local remote_user="$(get_backup_conf ${backup} remote_user)"
    local remote_keyfile="$(get_backup_conf ${backup} remote_keyfile)"
    local remote_path="$(get_backup_conf ${backup} remote_path)"
    local local_path="$(get_backup_conf ${backup} local_path)"
    mkdir -p ${local_path}
    echo_dated "Configuring SSH... " -n
    cat ${remote_keyfile} | ssh-add -k - >> /frx/start.log 2>&1
    ssh-keyscan -p ${remote_port} ${remote_host} 1>> ~/.ssh/known_hosts 2>> /frx/start.log
    echo "[OK]"
    echo_dated "Retrieving remote backups..."
    rsync -ave "ssh -p ${remote_port}" ${remote_user}@${remote_host}:${remote_path}/ ${local_path}/ 2>> /frx/start.log | trace_cmd
    echo_dated "Rotating local backups..."
    local local_rotate_type="$(get_backup_conf_type ${backup} local_rotate)"
    local local_rotate
    if [[ "${local_rotate_type}" == "string" ]]; then
        local_rotate=("$(get_backup_conf ${backup} local_rotate)")
    elif [[ "${local_rotate_type}" == "array" ]]; then
        mapfile -t local_rotate < <(get_backup_conf ${backup} 'local_rotate[]')
    fi
    local rotate_option
    for rotate_option in "${local_rotate[@]}"; do
        eval "rotate-backups ${rotate_option} ${local_path}" 2>&1 | sed 's/^[^[]*\[[0-9]*\] //g' | trace_cmd
    done
    echo_dated "Listing backuped files in '${local_path}':" 
    ls -AshR ${local_path} | trace_cmd
}

# Display version information
info "[FEROX Labrackup: https://github.com/frxyt/docker-labrackup]"
echo

# Check configuration file
declare -r conf_file="${1:-${LABRACKUP_CONF_FILE}}"
if [[ ! -f "${conf_file}" ]]; then
    die "Configuration file not found: '${conf_file}'."
fi
trace "Configuration file loaded: '${conf_file}'."

# Start SSH Agent
mkdir -p ~/.ssh
chmod 700 ~/.ssh
eval $(ssh-agent) > /dev/null

# List all backups
declare -a backup_list
mapfile -t backup_list < <(yq -Mr '.backups | keys[]' ${conf_file})
info "Configured backups: "
for backup in "${backup_list[@]}"; do
    echo_dated "- ${backup}"
    check_backup_conf ${backup}
done
echo

# Performing all backups
info "Running backups... "
echo
for backup in "${backup_list[@]}"; do
    info "Performing backup: ${backup}..."
    perform_backup ${backup}
    echo
done

# Display disk space usage for each backup filesystems
declare -a local_path_list
mapfile -t local_path_list < <(yq -Mr '.backups[].local_path' ${conf_file})
info "Disk space usage:"
df -h "${local_path_list[@]}" | uniq | trace_cmd

echo
success "Done."

# Remove error handling
trap - ERR