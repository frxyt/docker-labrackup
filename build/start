#!/bin/bash

# Copyright (c) 2019 FEROX YT EIRL, www.ferox.yt <devops@ferox.yt>
# Copyright (c) 2019 Jérémy WALTHER <jeremy.walther@golflima.net>
# See <https://github.com/frxyt/docker-labrackup> for details.

# Stop on first error
set -eE

# Handle errors and debug
((LABRACKUP_DEBUG > 0)) && touch /frx/start.log
((LABRACKUP_DEBUG > 1)) && set -x
function trap_err() {
    die "Fatal Error: /frx/start:$1$(((LABRACKUP_DEBUG > 0)) && echo && sed "$1q;d" /frx/start && echo && cat /frx/start.log)"
}
trap 'trap_err $LINENO' ERR

# Colors
declare NC=$'\033[0m'
declare DARK_GRAY=$'\033[1;30m'
declare LIGHT_RED=$'\033[1;31m'
declare LIGHT_GREEN=$'\033[1;32m'
declare LIGHT_BLUE=$'\033[1;34m'

# Disable colors if they are not supported
if [[ "$(tput colors 2> /dev/null)" == -1 || "$?" != 0 ]]; then
    NC=''; DARK_GRAY=''; LIGHT_RED=''; LIGHT_GREEN=''; LIGHT_BLUE=''; 
fi

# Declare needed functions
function echo_dated() {
    echo -e $2 "${DARK_GRAY}[$(date +'%F %T')]${NC} $1${NC}"
}

function die() {
    echo_dated $2 "${LIGHT_RED}[!] $1" >&2
    exit 1;
}

function info() {
    echo_dated $2 "${LIGHT_BLUE}$1"
}

function trace() {
    echo_dated $2 "${DARK_GRAY}$1"
}

function trace_cmd() {
    while read data; do
        trace "${data}"
    done
}

function success() {
    echo_dated $2 "${LIGHT_GREEN}$1"
}

function get_backup_conf() {
    local backup="$1"
    local config="$2"
    echo "$(yq -Mr ".backups.${backup}.${config} // empty" ${conf_file})"
}

function get_backup_conf_type() {
    local backup="$1"
    local config="$2"
    echo "$(yq -Mr ".backups.${backup}.${config} | type" ${conf_file})"
}

function check_backup_conf_type() {
    local backup="$1"
    local config="$2"
    local expected_type="$3"
    local actual_type="$(get_backup_conf_type ${backup} ${config})"
    if [[ ! "${actual_type}" =~ ${expected_type} ]]; then
        die "Expected type '${expected_type}' for '${backup}/${config}' in '${conf_file}', but found type: '${actual_type}'."
    fi
}

function check_backup_conf() {
    local backup="$1"
    check_backup_conf_type ${backup} remote_host string
    check_backup_conf_type ${backup} remote_port 'number|null'
    check_backup_conf_type ${backup} remote_user string
    check_backup_conf_type ${backup} remote_keyfile string
    check_backup_conf_type ${backup} remote_path string
    check_backup_conf_type ${backup} local_path string
    check_backup_conf_type ${backup} local_rotate array
    check_backup_conf_type ${backup} external_host 'string|null'
    check_backup_conf_type ${backup} external_port 'number|null'
    check_backup_conf_type ${backup} external_user 'string|null'
    check_backup_conf_type ${backup} external_password 'string|null'
    check_backup_conf_type ${backup} external_path 'string|null'
}

function sftp_mkdir() {
    local mkdir_path_full="$1"
    local mkdir_path_last=''
    local mkdir_command=''
    local IFS='/'
    for mkdir_path in ${mkdir_path_full}; do
        echo "mkdir ${mkdir_path_last}${mkdir_path}"
        mkdir_path_last="${mkdir_path_last}${mkdir_path}/"
    done
}

function perform_backup() {
    local backup="$1"
    local remote_host="$(get_backup_conf ${backup} remote_host)"
    local remote_port="$(get_backup_conf ${backup} remote_port)"; remote_port="${remote_port:-22}"
    local remote_user="$(get_backup_conf ${backup} remote_user)"
    local remote_keyfile="$(get_backup_conf ${backup} remote_keyfile)"
    local remote_path="$(get_backup_conf ${backup} remote_path)"
    local local_path="$(get_backup_conf ${backup} local_path)"
    local local_rotate; mapfile -t local_rotate < <(get_backup_conf ${backup} 'local_rotate[]')
    local external_host="$(get_backup_conf ${backup} external_host)"
    local external_port="$(get_backup_conf ${backup} external_port)"; external_port="${external_port:-22}"
    local external_user="$(get_backup_conf ${backup} external_user)"
    local external_password="$(get_backup_conf ${backup} external_password)"
    local external_path="$(get_backup_conf ${backup} external_path)"
    mkdir -p ${local_path}
    backup_path_size[${local_path}]=$(du -b ${local_path} | cut -f1)
    echo_dated "Configuring SSH... " -n
    [[ -n "${remote_keyfile}" ]] && cat ${remote_keyfile} | ssh-add -k - >> /frx/start.log 2>&1
    ssh-keyscan -p ${remote_port} ${remote_host} 1>> ~/.ssh/known_hosts 2>> /frx/start.log
    if [[ -n "${external_path}" ]]; then
        [[ -n "${external_keyfile}" ]] && cat ${external_keyfile} | ssh-add -k - >> /frx/start.log 2>&1
        ssh-keyscan -p ${external_port} ${external_host} 1>> ~/.ssh/known_hosts 2>> /frx/start.log
    fi
    echo "[OK]"
    echo_dated "Retrieving remote backups..."
    rsync -ahve "ssh -p ${remote_port}" ${remote_user}@${remote_host}:${remote_path}/ ${local_path}/ 2>> /frx/start.log | trace_cmd
    echo_dated "Rotating local backups..."
    local local_rotate_option
    for rotate_option in "${local_rotate[@]}"; do
        eval "rotate-backups ${rotate_option} ${local_path}" 2>&1 | sed 's/^[^[]*\[[0-9]*\] //g' | trace_cmd
    done
    echo_dated "Listing backuped files in '${local_path}':" 
    ls -AshR ${local_path} | trace_cmd
    if [[ -n "${external_path}" ]]; then
        echo_dated "Uploading backuped files to external host..."
        check_backup_conf_type ${backup} external_host string
        check_backup_conf_type ${backup} external_user string
        check_backup_conf_type ${backup} external_password string
        check_backup_conf_type ${backup} external_path string
        local external_error=0
        sshpass -p "${external_password}" sftp -P ${external_port} ${external_user}@${external_host} >> /frx/start.log 2>&1 <<< "$(sftp_mkdir ${external_path})" || external_error=1
        if [[ "${external_error}" == 0 ]]; then
            local external_files="$(sshpass -p "${external_password}" sftp -P ${external_port} ${external_user}@${external_host} 2>> /frx/start.log <<< "ls -l ${external_path}" | tail -n +2 | sed "s,${external_path}/,,g" | xargs -n 9 | cut -d' ' -f5,9)"
            local local_files
            local local_filename
            mapfile -t local_files < <(ls -l ${local_path} | tail -n +2 | xargs -n 9 | cut -d' ' -f5,9)
            for local_file in "${local_files[@]}"; do
                local_filename="$(echo "${local_file}" | cut -d' ' -f2)"
                [[ -d "${local_path}/${local_filename}" ]] && local_file="${local_filename}"
                if ! echo "${external_files}" | grep -q "${local_file}"; then
                    trace "Uploading '${local_filename}'... "
                    if [[ -n "${local_filename%/}" ]]; then
                        sshpass -p "${external_password}" sftp -P ${external_port} ${external_user}@${external_host} >> /frx/start.log 2>&1 <<< "$(sftp_mkdir ${external_path}/${local_filename%/})"
                    fi
                    sshpass -p "${external_password}" sftp -P ${external_port} ${external_user}@${external_host}:${external_path} >> /frx/start.log 2>&1 <<< "put -r ${local_path}/${local_filename}"
                fi
            done
            echo_dated "Disk space usage on external host:"
            sshpass -p "${external_password}" sftp -P ${external_port} ${external_user}@${external_host} 2>> /frx/start.log <<< "df -h ${external_path}" | tail -n +2 | trace_cmd
        else
            ((external_error_count++))
        fi
    fi
}

function display_disk_usage() {
    local local_path="$1"
    local usage_before="${backup_path_size[${local_path}]}"
    local usage_after="$(du -b ${local_path} | cut -f1)"
    local usege_diff_b="$((${usage_after} - ${usage_before}))"
    local usege_diff_p="$(((${usage_after} - ${usage_before}) * 100 / ${usage_before}))"
    local usage_text="${local_path}${spaces:0:$((${path_length_max} - ${#local_path}))}"
    usage_text="${usage_text}\t$(echo ${usage_before} | numfmt --to=iec --suffix=B)"
    usage_text="${usage_text}\t$(echo ${usage_after} | numfmt --to=iec --suffix=B)"
    usage_text="${usage_text}\t$(echo ${usege_diff_b} | numfmt --to=iec --suffix=B)"
    usage_text="${usage_text}\t${usege_diff_p}%"
    trace "${usage_text}"
}

# Display version information
info "[FEROX Labrackup: https://github.com/frxyt/docker-labrackup]"
echo

# Check configuration file
declare -r conf_file="${1:-${LABRACKUP_CONF_FILE}}"
if [[ ! -f "${conf_file}" ]]; then
    die "Configuration file not found: '${conf_file}'."
fi
trace "Configuration file loaded: '${conf_file}'."

# Start SSH Agent
mkdir -p ~/.ssh
chmod 700 ~/.ssh
eval $(ssh-agent) > /dev/null

# List all backups
declare -a backup_list
mapfile -t backup_list < <(yq -Mr '.backups | keys[]' ${conf_file})
info "Configured backups: "
for backup in "${backup_list[@]}"; do
    echo_dated "- ${backup}"
    check_backup_conf ${backup}
done
echo

# Performing all backups
declare -A backup_path_size
declare -i external_error_count=0
info "Running backups... "
echo
for backup in "${backup_list[@]}"; do
    info "Performing backup: ${backup}..."
    perform_backup ${backup}
    echo
done

# Display disk space usage for each backup filesystems
declare -a local_path_list
mapfile -t local_path_list < <(yq -Mr '.backups[].local_path' ${conf_file})
info "Total disk space usage:"
df -h "${local_path_list[@]}" | uniq | trace_cmd
echo
info "Disk space usage per backup:"
declare -i path_length_max=$(for i in "Backup path" "${local_path_list[@]}"; do echo ${#i}; done | sort -n | tail -1)
declare -r spaces="$(head -c ${path_length_max} < /dev/zero | tr '\0' ' ')"
trace "Backup path${spaces:0:$((${path_length_max} - 11))}\tBefore\tAfter\tDiff\t%"
for local_path in "${local_path_list[@]}"; do
    display_disk_usage ${local_path}
done

echo
success "Done."
((LABRACKUP_DEBUG > 1)) && cat /frx/start.log

((external_error_count > 0)) && die "Errors encountered when uploading backups to external host."

# Remove error handling
trap - ERR